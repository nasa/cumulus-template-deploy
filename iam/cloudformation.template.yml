
---
Parameters:
  CreateDeploymentRole:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  DeploymentUserName:
    Type: String
    Default: "n/a"
  DeploymentStackTemplateUrl:
    Type: String
    Default: "n/a"
  ResourcePrefix:
    Type: String
    Default: "template-cumulus"
  AlphaNumPrefix:
    Type: String
    Default: "TemplateCumulus"
Resources:
  LambdaApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-lambda-api-gateway"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaApiGateway
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:GetFunction
                  - lambda:invokeFunction
                  - lambda:CreateEventSourceMapping
                  - lambda:UpdateEventSourceMapping 
                  - lambda:DeleteEventSourceMapping 
                  - lambda:GetEventSourceMapping 
                  - lambda:ListEventSourceMappings 
                Resource: "*"

              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-*"

              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-*/stream/*"

              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource: '*'

              - Effect: Allow
                Action:
                  - s3:GetAccelerateConfiguration
                  - s3:GetLifecycleConfiguration
                  - s3:GetReplicationConfiguration
                  - s3:GetBucket*
                  - s3:PutAccelerateConfiguration
                  - s3:PutLifecycleConfiguration
                  - s3:PutReplicationConfiguration
                  - s3:PutBucket*
                  - s3:ListBucket*
                Resource:
                {{#each buckets}}
                  - arn:aws:s3:::{{this.name}}
                {{/each}}

              - Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:PutObject*
                  - s3:ListMultipartUploadParts
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: 
                {{#each buckets}}
                  - arn:aws:s3:::{{this.name}}/*
                {{/each}}

              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: '*'

              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:GetQueueAttributes
                  - sqs:SendMessage
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ResourcePrefix}-*"

              # allow adding/editing/deleting of rules associated with this deployment
              - Effect: Allow
                Action:
                  - events:DisableRule
                  - events:DeleteRule
                  - events:EnableRule
                  - events:ListRules
                  - events:PutRule
                  - events:DescribeRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${ResourcePrefix}-*"

              # Allow state machine interactions
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:GetExecutionHistory
                Resource: arn:aws:states:*:*:*

  # role for Lambdas that are NOT used with APIGateway
  LambdaProcessingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-lambda-processing"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ProcessingLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:invokeFunction
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"

              # Allow access to kinesis 
              - Effect: Allow
                Action:
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                Resource: '*'

              # Allow writing to ingest buckets
              - Effect: Allow
                Action:
                  - s3:GetAccelerateConfiguration
                  - s3:GetLifecycleConfiguration
                  - s3:GetReplicationConfiguration
                  - s3:GetBucket*
                  - s3:PutAccelerateConfiguration
                  - s3:PutLifecycleConfiguration
                  - s3:PutReplicationConfiguration
                  - s3:PutBucket*
                  - s3:ListBucket*
                Resource:
                {{#each buckets}}
                  - arn:aws:s3:::{{this.name}}
                {{/each}}

              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetObject*
                  - s3:PutObject*
                  - s3:ListMultipartUploadParts
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: 
                {{#each buckets}}
                  - arn:aws:s3:::{{this.name}}/*
                {{/each}}

              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: '*'

              # Allow access to dynamoDB
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-*"

              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ResourcePrefix}-*/stream/*"
              
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource: '*'
                 
              # Allow access to SQS
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:ChangeMessageVisibility
                  - sqs:DeleteMessage
                  - sqs:GetQueueUrl
                  - sqs:GetQueueAttributes
                Resource: !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ResourcePrefix}-*"

              # Allow state machine interactions
              - Effect: Allow
                Action:
                - states:SendTaskFailure
                - states:SendTaskSuccess
                - states:GetActivityTask
                - states:GetExecutionHistory
                - states:DescribeActivity
                - states:DescribeExecution
                - states:StartExecution
                - states:StopExecution
                - states:ListStateMachines
                Resource: arn:aws:states:*:*:*

              # allow adding/editing/deleting of rules associated with this deployment
              - Effect: Allow
                Action:
                  - events:DisableRule
                  - events:EnableRule
                  - events:ListRules
                  - events:PutRule
                  - events:DeleteRule
                  - events:DescribeRule
                Resource: '*'

              # this is needed for running Lambda in a VPC
              # This might not be needed in the NGAP environment
              # if all lambdas are already running in a general VPC
              # environment
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: '*'

              # allow publishing to SNS
              - Effect: Allow
                Action:
                  - sns:publish
                  - sns:List*
                Resource: '*'

  StepRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-steprole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StepRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ResourcePrefix}-ecs"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ECSRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecs:DeregisterContainerInstance
                  - ecs:DescribeClusters
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeServices
                  - ecs:DiscoverPollEndpoint
                  - ecs:ListContainerInstances
                  - ecs:ListServices
                  - ecs:ListTaskDefinitions
                  - ecs:ListTasks
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:RunTask
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - lambda:GetFunction
                  - lambda:invokeFunction
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"

              # Allow state machine interactions
              - Effect: Allow
                Action:
                - states:SendTaskFailure
                - states:SendTaskSuccess
                - states:GetActivityTask
                - states:DescribeActivity
                - states:GetExecutionHistory
                Resource: arn:aws:states:*:*:*

              # Allow writing to ingest buckets
              - Effect: Allow
                Action:
                  - s3:GetAccelerateConfiguration
                  - s3:GetLifecycleConfiguration
                  - s3:GetReplicationConfiguration
                  - s3:GetBucket*
                  - s3:PutAccelerateConfiguration
                  - s3:PutLifecycleConfiguration
                  - s3:PutReplicationConfiguration
                  - s3:PutBucket*
                  - s3:ListBucket*
                Resource:
                {{#each buckets}}
                  - arn:aws:s3:::{{this.name}}
                {{/each}}

              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetObject*
                  - s3:PutObject*
                  - s3:ListMultipartUploadParts
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                Resource: 
                {{#each buckets}}
                  - arn:aws:s3:::{{this.name}}/*
                {{/each}}

              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: '*'


  CumulusInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${ResourcePrefix}-ecs"
      Path: "/"
      Roles:
        - !Ref ECSRole

Outputs:
  CumulusInstanceProfileArn:
    Value: !GetAtt CumulusInstanceProfile.Arn
  EcsRoleArn:
    Value: !GetAtt ECSRole.Arn
  LambdaApiGatewayRoleArn:
    Value: !GetAtt LambdaApiGatewayRole.Arn
  LambdaProcessingRoleArn:
    Value: !GetAtt LambdaProcessingRole.Arn
  StepRoleArn:
    Value: !GetAtt StepRole.Arn

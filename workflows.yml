
MonitorSircQueue:
  Comment: 'Monitor SIRC Ingest SQS'
  StartAt: StartStatus
  States:
    StartStatus:
      Type: Task
      Resource: ${sf2snsStartLambdaFunction.Arn}
      Next: ReadQueue
    ReadQueue:
      Type: Task
      Resource: ${ReadEventLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: StopStatus
      Next: QueueChoice
    QueueChoice:
      Type: Choice
      Choices:
        - Variable: $.payload.OBJECTS
          NumericEquals: 0
          Next: StopStatus
        - Variable: $.payload.OBJECTS
          NumericGreaterThan: 0
          Next: QueueGranules
    QueueGranules:
      CumulusConfig:
        provider: '{$.meta.provider}'
        internalBucket: '{$.meta.buckets.internal.name}'
        stackName: '{$.meta.stackName}'
        granuleIngestMessageTemplateUri: '{$.meta.templates.SircIngest}'
        queueUrl: '{$.meta.queues.startSF}'
      Type: Task
      Resource: ${QueueGranulesLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: DeleteQueue
    DeleteQueue:
      Type: Task
      Resource: ${DeleteEventLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: StopStatus
      Next: StopStatus
    StopStatus:
      Type: Task
      Resource: ${sf2snsEndLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

SircIngest:
  Comment: 'Example SIRC Ingest'
  StartAt: StartStatus
  States:
    StartStatus:
      Type: Task
      Resource: ${sf2snsStartLambdaFunction.Arn}
      Next: ProcessSircGranule
    ProcessSircGranule:
      CumulusConfig:
        collections: '{$.meta.collections}'
        buckets: '{$.meta.buckets}'
      Type: Task
      Resource: ${ProcessSircGranuleLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: ReportToCmr
    ReportToCmr:
      CumulusConfig:
        bucket: '{$.meta.buckets.internal.name}'
        stack: '{$.meta.stackName}'
        cmr: '{$.meta.cmr}'
        process: '{$.cumulus_meta.process}'
        granules: '{$.payload.granules}'
        granuleIdExtraction: '{$.meta.collection.granuleIdExtraction}'
      Type: Task
      Resource: ${PostToCmrLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
          - States.ALL
          ResultPath: '$.exception'
          Next: StopStatus
      Next: StopStatus 
    StopStatus:
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      CumulusConfig:
        sfnEnd: true
        stack: '{$.meta.stack}'
        bucket: '{$.meta.buckets.internal.name}'
        stateMachine: '{$.cumulus_meta.state_machine}'
        executionName: '{$.cumulus_meta.execution_name}'
        cumulus_message:
          input: '{$}'
      Catch:
        - ErrorEquals:
          - States.ALL
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: 'Workflow failed'

        
